uniform mat4 uMVPMatrix;//总变换矩阵
uniform mat4 uMMatrix;//变换矩阵
attribute vec3 aPosition;//顶点位置
attribute vec2 aTexCoor;//纹理坐标
attribute vec3 aNormal;//顶点法向量
varying vec2 vTextureCoord;//传递给片元着色器纹理坐标
varying vec3 fNormal;//传递给片元着色器的顶点法向量
varying vec3 vPosition;//传递给片元着色器顶点位置
void main(){

   vec3 normalTarget=aPosition+aNormal;	//计算变换后的法向量
   fNormal=(uMMatrix*vec4(normalTarget,1)).xyz-(uMMatrix*vec4(aPosition,1)).xyz;
   vPosition=(uMMatrix*vec4(aPosition,1)).xyz;//传递给片元着色器顶点位置
   vTextureCoord=aTexCoor;
   gl_Position=uMVPMatrix*vec4(aPosition,1);
}
<#BREAK_BN#>
precision mediump float;
uniform sampler2D sTexture;             //纹理内容数据
uniform vec3 uCamera;                   //摄像机位置
uniform vec3 lightLocation;             //光源位置
varying vec2 vTextureCoord;           //传递给片元着色器纹理坐标
varying vec3 fNormal;               //传递给片元着色器的顶点法向量
varying vec3 vPosition;         //传递给片元着色器顶点位置
void main(){
    vec3 uAmbientColor=vec3(0.15,0.15,0.15);
    vec3 uDiffuseColor=vec3(0.9,0.9,0.9);
    vec3 uSpecularColor=vec3(0.4,0.4,0.4);
    float uMaterialShininess=20.0;
    vec3 lightDirection=normalize(vPosition - lightLocation);//光线方向
    vec3 eyeDirection=normalize(uCamera-vPosition);//视线方向
    vec3 reflectDirection=reflect(lightDirection,normalize(fNormal));//反射光方向
    float specularLightWeighting=pow(max(dot(reflectDirection,eyeDirection),0.0),uMaterialShininess);//镜面高光的强度
    float diffuseLightWeighting=max(dot(normalize(fNormal),-lightDirection),0.0);//散射光强度
    vec3 lightWight=uAmbientColor+uSpecularColor*specularLightWeighting+uDiffuseColor*diffuseLightWeighting;
    vec4 fragmentColor=texture2D(sTexture,vTextureCoord);
    gl_FragColor=vec4(fragmentColor.rgb*lightWight,fragmentColor.a);
}
